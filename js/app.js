// Generated by CoffeeScript 1.9.3
(function() {
  var APP, Circle, Line,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var app;
    return app = new APP;
  });

  APP = (function() {
    APP.prototype.win = {
      w: $(window).outerWidth(),
      h: $(window).outerHeight()
    };

    APP.prototype.mouse = {
      x: 0,
      y: 0
    };

    APP.prototype.Scene = null;

    APP.prototype.circles = [];

    APP.prototype.lines = [];

    function APP() {
      this.mousemove = bind(this.mousemove, this);
      window.APP = this;
      this.el = document.getElementById('scene');
      $(document).on('mousemove', this.mousemove);
      this.Scene = new Two({
        fullscreen: true,
        type: 'SVGRenderer'
      });
      this.Scene.appendTo(this.el);
      this.createCircles();
      this.createLines();
      this.animateScale();
      this.animateScene();
    }

    APP.prototype.createCircles = function() {
      var circle, i, k, radius, results, x, y;
      results = [];
      for (i = k = 0; k < 250; i = ++k) {
        circle = new Circle;
        x = Math.random() * this.win.w;
        y = Math.random() * this.win.h;
        radius = (Math.random() * 30) + 5;
        circle.makeCircle(x, y, radius);
        results.push(this.circles.push(circle));
      }
      return results;
    };

    APP.prototype.createLines = function() {
      var i, k, l, line, origin, point, points, results;
      results = [];
      for (i = k = 0; k < 6; i = ++k) {
        line = new Line;
        origin = this.circles[Math.floor(Math.random() * this.circles.length)];
        points = [];
        for (i = l = 0; l < 3; i = ++l) {
          point = this.circles[Math.floor(Math.random() * this.circles.length)];
          points.push(point);
        }
        line.makeLine(origin, points);
        results.push(this.lines.push(line));
      }
      return results;
    };

    APP.prototype.mousemove = function(event) {
      return this.mouse = {
        x: event.pageX - (this.win.w / 2),
        y: event.pageY - (this.win.h / 2)
      };
    };

    APP.prototype.animateScale = function() {
      var circle, i, index, j, key, ref, results, ring, tween;
      index = Math.floor(Math.random() * this.circles.length);
      circle = this.circles[index];
      i = 0;
      ref = circle.group.children;
      results = [];
      for (key in ref) {
        ring = ref[key];
        i++;
        j = 0;
        tween = new TWEEN.Tween(ring).to({
          scale: 1.25
        }, 1000).delay(i * 100).easing(TWEEN.Easing.Cubic.Out).onComplete(function() {
          var ref1, results1;
          j++;
          if (j === 5) {
            ref1 = circle.group.children;
            results1 = [];
            for (key in ref1) {
              ring = ref1[key];
              tween = new TWEEN.Tween(ring).to({
                scale: 1
              }, 3000).easing(TWEEN.Easing.Cubic.InOut);
              results1.push(tween.start());
            }
            return results1;
          }
        });
        results.push(tween.start());
      }
      return results;
    };

    APP.prototype.animateScene = function() {
      this.RAF = this.Scene.bind('update', (function(_this) {
        return function(frameCount, timeDelta) {
          var circle, k, l, len, len1, lines, ref, ref1;
          if (frameCount % 50 === 1) {
            _this.animateScale();
          }
          ref = _this.circles;
          for (k = 0, len = ref.length; k < len; k++) {
            circle = ref[k];
            circle.update(_this.mouse);
          }
          ref1 = _this.lines;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            lines = ref1[l];
            lines.update();
          }
          return TWEEN.update();
        };
      })(this));
      return this.RAF.play();
    };

    return APP;

  })();

  Line = (function() {
    Line.prototype.win = {
      w: $(window).outerWidth(),
      h: $(window).outerHeight()
    };

    Line.prototype.origin = null;

    Line.prototype.points = [];

    Line.prototype.lines = [];

    function Line() {
      this.scene = window.APP.Scene;
    }

    Line.prototype.makeLine = function(origin1, points1) {
      var k, len, line, point, ref, results;
      this.origin = origin1;
      this.points = points1;
      ref = this.points;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        point = ref[k];
        line = this.scene.makeLine(this.origin.x, this.origin.y, point.x, point.y);
        line.stroke = '#eee';
        line.opacity = 1;
        line.point = point;
        results.push(this.lines.push(line));
      }
      return results;
    };

    Line.prototype.update = function() {
      var h2, k, len, line, ref, results, w2;
      ref = this.lines;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        line = ref[k];
        w2 = (line.point.x - this.origin.x) / 2;
        h2 = (line.point.y - this.origin.y) / 2;
        line.vertices[0].x = -w2;
        line.vertices[0].y = -h2;
        line.vertices[1].x = w2;
        line.vertices[1].y = h2;
        results.push(line.translation.set(this.origin.x + w2, this.origin.y + h2));
      }
      return results;
    };

    return Line;

  })();

  Circle = (function() {
    Circle.prototype.win = {
      w: $(window).outerWidth(),
      h: $(window).outerHeight()
    };

    Circle.prototype.x = 0;

    Circle.prototype.y = 0;

    Circle.prototype.group = null;

    Circle.prototype.fallSpeed = 0;

    function Circle() {
      this.scene = window.APP.Scene;
    }

    Circle.prototype.makeCircle = function(x1, y1, radius1) {
      var center, i, k, radius, ring;
      this.x = x1;
      this.y = y1;
      this.radius = radius1;
      this.group = this.scene.makeGroup();
      this.delta = new Two.Vector;
      this.fallSpeed = Math.random() * 3.05 + 1.05;
      for (i = k = 3; k >= 0; i = k += -1) {
        radius = (i * this.radius) + this.radius * 2;
        ring = this.scene.makeCircle(0, 0, radius);
        ring.stroke = randomColor({
          hue: 'monochrome',
          luminosity: 'light'
        });
        ring.linewidth = 1;
        ring.opacity = 1;
        ring.type = 'ring';
        ring.fill = 'rgba(0,0,0,0)';
        if (i === 3) {
          ring.fill = 'black';
        }
        ring.addTo(this.group);
      }
      center = this.scene.makeCircle(0, 0, this.radius);
      center.fill = '#eee';
      center.linewidth = 0;
      center.type = 'center';
      center.addTo(this.group);
      return this.group.translation.set(this.x, this.y);
    };

    Circle.prototype.randomRing = function() {
      var ids, index, key, ring;
      ids = [];
      for (key in this.group.children) {
        ids.push(key);
      }
      index = Math.floor(Math.random() * ids.length);
      if (index === 0) {
        index = index + 1;
      }
      if (index === ids.length - 1) {
        index = index - 1;
      }
      ring = this.group.children[ids[index]];
      return ring;
    };

    Circle.prototype.update = function(mouse) {
      var x, y;
      if (this.x > this.win.w + 50) {
        x = -50;
      } else if (this.x < -50) {
        x = this.win.w + 50;
      } else {
        x = this.x;
      }
      if (this.y > this.win.h + 50) {
        y = -50;
      } else {
        y = this.y;
      }
      this.x = x + (mouse.x / 10) / this.radius;
      this.y = y + this.fallSpeed;
      return this.group.translation.set(this.x, this.y);
    };

    return Circle;

  })();

}).call(this);
